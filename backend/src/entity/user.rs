//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub login: String,
    pub name: String,
    pub surname: String,
    pub password: String,
    pub phone: String,
    pub email: String,
    pub active: bool,
    pub create_at: String,
    pub update_at: String,
}

impl Entity {
    pub async fn find_by_login(login: String, db: &DbConn) -> Option<Model> {
        Self::find()
            .filter(Column::Login.eq(login))
            .one(db)
            .await
            .unwrap()
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user_permision::Entity",
        from = "Column::Id",
        to = "super::user_permision::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UserPermision,
}

impl Related<super::user_permision::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPermision.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
